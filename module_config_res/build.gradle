apply plugin: 'com.android.library'

def readConfig(def buildType) {
    def configFileName;
    com.android.build.gradle.internal.dsl.BuildType buildTypeJava = buildType;
    buildTypeJava.setMinifyEnabled(false);
    switch (buildTypeJava.name) {
        case "debug":
            configFileName = 'config_dev.properties';
            break;
        case "release":
            configFileName = 'config_release.properties';
            break;
        default:
            configFileName = 'config_release.properties';
            break;
    }
    Properties properties = new Properties()
    InputStream inputStream = project.file(configFileName)
            .newDataInputStream();
    properties.load(inputStream);

    properties.stringPropertyNames().each() { element ->
        def value = properties.getProperty(element);
        def startStr = String.valueOf("(");
        def endStr = String.valueOf(")");
        def start = value.indexOf(startStr);
        if (start >= 0) {
            def valueType = value.substring(start, value.indexOf(endStr));
            valueType = valueType.replaceAll("\\(", "");
            value = value.substring(value.indexOf(endStr) + endStr.length());
            if (valueType == "String") {
                buildTypeJava.buildConfigField(valueType, element.toUpperCase(), "\"${value}\"");
            } else {
                buildTypeJava.buildConfigField(valueType, element.toUpperCase(), "${value}");
            }
        }
    }
    buildTypeJava.buildConfigField("String", "APK_RELEASE_TIME", "\"${releaseTime()}\"");
    //不能带V
    buildTypeJava.buildConfigField("String", "APP_UPDATE_VERSION_NAME", "\"${rootProject.ext.android["versionName"]}\"".replace("v", ""));
    return properties;
}

// 定义打包时间戳
def releaseTime() {
    return new Date().getTime();
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    resourcePrefix project.name

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            readConfig(it)
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            readConfig(it)
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}
