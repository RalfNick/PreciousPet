package com.ralf.module_db.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.ralf.module_db.data.entity.MessageRemindEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_REMIND_ENTITY".
*/
public class MessageRemindEntityDao extends AbstractDao<MessageRemindEntity, Void> {

    public static final String TABLENAME = "MESSAGE_REMIND_ENTITY";

    /**
     * Properties of entity MessageRemindEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Comment = new Property(0, int.class, "comment", false, "COMMENT");
        public final static Property InformationPush = new Property(1, int.class, "informationPush", false, "INFORMATION_PUSH");
        public final static Property Notification = new Property(2, int.class, "notification", false, "NOTIFICATION");
        public final static Property NotifyDisplayMessages = new Property(3, int.class, "notifyDisplayMessages", false, "NOTIFY_DISPLAY_MESSAGES");
        public final static Property Praise = new Property(4, int.class, "praise", false, "PRAISE");
        public final static Property PreventTrouble = new Property(5, int.class, "preventTrouble", false, "PREVENT_TROUBLE");
        public final static Property PrivateChat = new Property(6, int.class, "privateChat", false, "PRIVATE_CHAT");
        public final static Property Shake = new Property(7, int.class, "shake", false, "SHAKE");
        public final static Property Sound = new Property(8, int.class, "sound", false, "SOUND");
        public final static Property SystemNotifications = new Property(9, int.class, "systemNotifications", false, "SYSTEM_NOTIFICATIONS");
    }


    public MessageRemindEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageRemindEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_REMIND_ENTITY\" (" + //
                "\"COMMENT\" INTEGER NOT NULL ," + // 0: comment
                "\"INFORMATION_PUSH\" INTEGER NOT NULL ," + // 1: informationPush
                "\"NOTIFICATION\" INTEGER NOT NULL ," + // 2: notification
                "\"NOTIFY_DISPLAY_MESSAGES\" INTEGER NOT NULL ," + // 3: notifyDisplayMessages
                "\"PRAISE\" INTEGER NOT NULL ," + // 4: praise
                "\"PREVENT_TROUBLE\" INTEGER NOT NULL ," + // 5: preventTrouble
                "\"PRIVATE_CHAT\" INTEGER NOT NULL ," + // 6: privateChat
                "\"SHAKE\" INTEGER NOT NULL ," + // 7: shake
                "\"SOUND\" INTEGER NOT NULL ," + // 8: sound
                "\"SYSTEM_NOTIFICATIONS\" INTEGER NOT NULL );"); // 9: systemNotifications
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_REMIND_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageRemindEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getComment());
        stmt.bindLong(2, entity.getInformationPush());
        stmt.bindLong(3, entity.getNotification());
        stmt.bindLong(4, entity.getNotifyDisplayMessages());
        stmt.bindLong(5, entity.getPraise());
        stmt.bindLong(6, entity.getPreventTrouble());
        stmt.bindLong(7, entity.getPrivateChat());
        stmt.bindLong(8, entity.getShake());
        stmt.bindLong(9, entity.getSound());
        stmt.bindLong(10, entity.getSystemNotifications());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageRemindEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getComment());
        stmt.bindLong(2, entity.getInformationPush());
        stmt.bindLong(3, entity.getNotification());
        stmt.bindLong(4, entity.getNotifyDisplayMessages());
        stmt.bindLong(5, entity.getPraise());
        stmt.bindLong(6, entity.getPreventTrouble());
        stmt.bindLong(7, entity.getPrivateChat());
        stmt.bindLong(8, entity.getShake());
        stmt.bindLong(9, entity.getSound());
        stmt.bindLong(10, entity.getSystemNotifications());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MessageRemindEntity readEntity(Cursor cursor, int offset) {
        MessageRemindEntity entity = new MessageRemindEntity( //
            cursor.getInt(offset + 0), // comment
            cursor.getInt(offset + 1), // informationPush
            cursor.getInt(offset + 2), // notification
            cursor.getInt(offset + 3), // notifyDisplayMessages
            cursor.getInt(offset + 4), // praise
            cursor.getInt(offset + 5), // preventTrouble
            cursor.getInt(offset + 6), // privateChat
            cursor.getInt(offset + 7), // shake
            cursor.getInt(offset + 8), // sound
            cursor.getInt(offset + 9) // systemNotifications
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageRemindEntity entity, int offset) {
        entity.setComment(cursor.getInt(offset + 0));
        entity.setInformationPush(cursor.getInt(offset + 1));
        entity.setNotification(cursor.getInt(offset + 2));
        entity.setNotifyDisplayMessages(cursor.getInt(offset + 3));
        entity.setPraise(cursor.getInt(offset + 4));
        entity.setPreventTrouble(cursor.getInt(offset + 5));
        entity.setPrivateChat(cursor.getInt(offset + 6));
        entity.setShake(cursor.getInt(offset + 7));
        entity.setSound(cursor.getInt(offset + 8));
        entity.setSystemNotifications(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MessageRemindEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MessageRemindEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(MessageRemindEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
