package com.ralf.module_db.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.ralf.module_db.data.entity.PetAssistantEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Pet_Assistant".
*/
public class PetAssistantEntityDao extends AbstractDao<PetAssistantEntity, Long> {

    public static final String TABLENAME = "Pet_Assistant";

    /**
     * Properties of entity PetAssistantEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property QCType = new Property(1, int.class, "qCType", false, "qc_type");
        public final static Property QCheadPortrait = new Property(2, String.class, "qCheadPortrait", false, "headportrait");
        public final static Property QChxId = new Property(3, String.class, "qChxId", false, "qc_chxid");
        public final static Property QCnickName = new Property(4, String.class, "qCnickName", false, "qc_name");
        public final static Property QCuserId = new Property(5, int.class, "qCuserId", false, "qc_userId");
    }


    public PetAssistantEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PetAssistantEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Pet_Assistant\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ," + // 0: id
                "\"qc_type\" INTEGER NOT NULL ," + // 1: qCType
                "\"headportrait\" TEXT," + // 2: qCheadPortrait
                "\"qc_chxid\" TEXT," + // 3: qChxId
                "\"qc_name\" TEXT," + // 4: qCnickName
                "\"qc_userId\" INTEGER NOT NULL );"); // 5: qCuserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Pet_Assistant\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PetAssistantEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getQCType());
 
        String qCheadPortrait = entity.getQCheadPortrait();
        if (qCheadPortrait != null) {
            stmt.bindString(3, qCheadPortrait);
        }
 
        String qChxId = entity.getQChxId();
        if (qChxId != null) {
            stmt.bindString(4, qChxId);
        }
 
        String qCnickName = entity.getQCnickName();
        if (qCnickName != null) {
            stmt.bindString(5, qCnickName);
        }
        stmt.bindLong(6, entity.getQCuserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PetAssistantEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getQCType());
 
        String qCheadPortrait = entity.getQCheadPortrait();
        if (qCheadPortrait != null) {
            stmt.bindString(3, qCheadPortrait);
        }
 
        String qChxId = entity.getQChxId();
        if (qChxId != null) {
            stmt.bindString(4, qChxId);
        }
 
        String qCnickName = entity.getQCnickName();
        if (qCnickName != null) {
            stmt.bindString(5, qCnickName);
        }
        stmt.bindLong(6, entity.getQCuserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PetAssistantEntity readEntity(Cursor cursor, int offset) {
        PetAssistantEntity entity = new PetAssistantEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // qCType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // qCheadPortrait
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // qChxId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // qCnickName
            cursor.getInt(offset + 5) // qCuserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PetAssistantEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setQCType(cursor.getInt(offset + 1));
        entity.setQCheadPortrait(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQChxId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQCnickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQCuserId(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PetAssistantEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PetAssistantEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PetAssistantEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
