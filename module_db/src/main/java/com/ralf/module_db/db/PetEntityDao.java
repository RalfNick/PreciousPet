package com.ralf.module_db.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.ralf.module_db.data.entity.PetEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Pet".
*/
public class PetEntityDao extends AbstractDao<PetEntity, Long> {

    public static final String TABLENAME = "Pet";

    /**
     * Properties of entity PetEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property HeadPortrait = new Property(1, String.class, "headPortrait", false, "head_portrait");
        public final static Property PetId = new Property(2, int.class, "petId", false, "PET_ID");
        public final static Property PetName = new Property(3, String.class, "petName", false, "name");
        public final static Property Sex = new Property(4, int.class, "sex", false, "SEX");
        public final static Property PetSelect = new Property(5, boolean.class, "petSelect", false, "pet_select");
    }


    public PetEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PetEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Pet\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ," + // 0: id
                "\"head_portrait\" TEXT," + // 1: headPortrait
                "\"PET_ID\" INTEGER NOT NULL ," + // 2: petId
                "\"name\" TEXT," + // 3: petName
                "\"SEX\" INTEGER NOT NULL ," + // 4: sex
                "\"pet_select\" INTEGER NOT NULL );"); // 5: petSelect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Pet\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PetEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String headPortrait = entity.getHeadPortrait();
        if (headPortrait != null) {
            stmt.bindString(2, headPortrait);
        }
        stmt.bindLong(3, entity.getPetId());
 
        String petName = entity.getPetName();
        if (petName != null) {
            stmt.bindString(4, petName);
        }
        stmt.bindLong(5, entity.getSex());
        stmt.bindLong(6, entity.getPetSelect() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PetEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String headPortrait = entity.getHeadPortrait();
        if (headPortrait != null) {
            stmt.bindString(2, headPortrait);
        }
        stmt.bindLong(3, entity.getPetId());
 
        String petName = entity.getPetName();
        if (petName != null) {
            stmt.bindString(4, petName);
        }
        stmt.bindLong(5, entity.getSex());
        stmt.bindLong(6, entity.getPetSelect() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PetEntity readEntity(Cursor cursor, int offset) {
        PetEntity entity = new PetEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // headPortrait
            cursor.getInt(offset + 2), // petId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // petName
            cursor.getInt(offset + 4), // sex
            cursor.getShort(offset + 5) != 0 // petSelect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PetEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setHeadPortrait(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPetId(cursor.getInt(offset + 2));
        entity.setPetName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.getInt(offset + 4));
        entity.setPetSelect(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PetEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PetEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PetEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
